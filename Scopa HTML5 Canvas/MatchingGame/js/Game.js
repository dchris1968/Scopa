function Game() {
     if ( !(this instanceof arguments.callee) ) {
        return new arguments.callee(arguments); 
    }
    
    var gameBoard;
    var deck;
    var numCards;
    var matchesFound;
    var cardArray;
    var selectedCards;
    var loop;
    var self = this;
    
    self.init = function() {
        // gameboard
        self.gameBoard = paper.rect(0, 0, 1250, 700, 15);
        self.gameBoard.attr({
            fill:'#090',          /* fill with a greenish color */
            stroke:'#000'    /* draw a black border */
        });
        self.gameBoard.toBack();
        
        self.selectedCards = new Set();
        
        var attrList = {fill:"#FFF", stroke: 2};
        var gameTitle = paper.print(500,30, "Scopa Game", paper.getFont("Droid Sans", "bold"), 48)
        gameTitle.attr(attrList)
        
        // deck
        self.deck = new Deck(1);
        self.numCards = 6;
        self.matchesFound = 0;
        self.cardArray = self.deck.dealCards(self.numCards);
        
        // Make a copy of each card
        for(var i=0; i<self.numCards; i++) {
            var c = self.cardArray[i];
            self.cardArray[i+self.numCards] = new Card(c.ord, c.suit);
        }
        // Shuffle the cards
        self.cardArray = self.cardArray.shuffle();    
        
        // Card positions
        var xOffset = 169;
        var yOffset = 245;
        for (var i = 0; i < 3; i++) {    
            for (var j = 0; j < 4; j++) {
                var k = (i*4) + j;
                var card = self.cardArray[k];
                card.meta['pos'] = k
                card.xPos = j * xOffset + 20;
                card.yPos = i * yOffset + 50;
            }
        }
        
        // draw
        
        
        // Draw cards
        for(var i = 0; i<12; i++) {        
            self.cardArray[i].drawCard();
        }
        
        // Draw you win loop
        self.loop =  paper.path("m84,284c0,-2 -0.38268,-3.07611 0,-4c0.5412,-1.30655 0.23463,-2.15225 1,-4c0.5412,-1.30655 1,-3 1,-5c0,-2 0,-4 0,-6c0,-2 0,-5 0,-8c0,-2 0.49346,-3.87856 1,-7c0.32037,-1.97418 0.49346,-3.87856 1,-7c0.32037,-1.97418 0.4588,-3.69344 1,-5c0.38268,-0.92387 0.48626,-1.82375 1,-4c0.22975,-0.97325 0.77025,-2.02675 1,-3c0.51374,-2.17625 1.77025,-3.02675 2,-4c0.51374,-2.17625 1.69255,-4.186 3,-6c0.8269,-1.14726 2.1731,-2.85274 3,-4c1.30745,-1.814 3.34619,-2.70546 5,-5c1.30745,-1.814 2.70546,-3.34619 5,-5c1.814,-1.30745 3.31001,-1.33749 6,-3c1.203,-0.7435 3.09789,-2.82443 5,-4c1.7013,-1.05147 5,-2 7,-3c2,-1 3.59399,-2.513 6,-4c2.68999,-1.66251 6.07843,-1.78986 9,-3c2.06586,-0.85571 5.03874,-1.51945 8,-2c3.12144,-0.50655 6.02582,-1.67964 8,-2c3.12144,-0.50655 5.82375,-1.48625 8,-2c2.91975,-0.68925 6,0 9,0c3,0 5,0 9,0c3,0 5,0 7,0c4,0 6,0 9,0c3,0 5,0 7,0c2,0 4.82375,1.48625 7,2c1.9465,0.4595 3.0535,0.5405 5,1c2.17625,0.51375 3.0535,1.5405 5,2c2.17625,0.51375 3,1 5,2c2,1 4.04291,1.71022 5,2c3.45085,1.04483 5.01291,2.83981 6,3c3.12144,0.50655 4.87856,2.49345 8,3c0.98709,0.16019 3,1 4,2c1,1 3,2 4,3c1,1 2.1731,1.85274 3,3c1.30746,1.814 2,3 4,5c1,1 2.70547,3.34619 5,5c1.814,1.30745 6.186,2.69255 8,4c2.29453,1.65381 3.37201,2.3851 7,5c2.29453,1.65381 4,3 6,5c1,1 4.41885,2.41885 6,4c1.58115,1.58115 3.61383,3.297 6,6c1.47983,1.67633 4,4 5,5c3,3 4.81265,5.2068 7,7c2.78833,2.28587 4,3 6,5c1,1 3,3 5,5c1,1 1.69254,2.186 3,4c1.65381,2.29453 3,3 5,5c1,1 2.34619,2.70547 4,5c1.30746,1.814 3.1731,3.85272 4,5c1.30746,1.814 2.19028,3.88153 4,7c1.12234,1.93399 2.69254,3.186 4,5c1.65381,2.29453 4.82443,2.0979 6,4c0.52573,0.85065 2.85272,3.1731 4,4c1.814,1.30746 2.85272,1.1731 4,2c1.814,1.30746 2.82376,1.48627 5,2c0.97324,0.22977 2,0 3,0c1,0 2,0 3,0c1,0 2,0 4,0c1,0 2.0535,-0.5405 4,-1c2.17624,-0.51373 4,-2 6,-3c2,-1 3.88153,-2.19028 7,-4c1.93399,-1.12234 3.59399,-3.513 6,-5c2.69,-1.66251 4.61105,-1.92807 7,-4c1.68924,-1.46509 2.74673,-3.37134 7,-6c1.9021,-1.17557 2,-2 5,-5c1,-1 1.56723,-3.28326 3,-5c3.20374,-3.83875 5,-5 6,-7c1,-2 3.19028,-6.88153 5,-10c1.12234,-1.93399 3.56952,-6.133 5,-10c0.77579,-2.09717 3.27432,-7.88496 4,-10c1.65482,-4.82303 1,-7 1,-8c0,-3 1,-6 1,-9c0,-2 0,-6 0,-8c0,-1 -0.23462,-4.15224 -1,-6c-0.5412,-1.30656 -1.2565,-2.797 -2,-4c-1.66251,-2.68999 -2.14935,-3.47427 -3,-4c-1.9021,-1.17557 -1.69345,-3.4588 -3,-4c-0.92389,-0.38269 -1.69345,-1.4588 -3,-2c-0.92389,-0.38269 -5.186,-0.69255 -7,-2c-1.14728,-0.8269 -6,-1 -10,-1c-3,0 -10,0 -13,0c-3,0 -11.04132,1.84723 -15,3c-6.07233,1.76826 -9.23532,3.36955 -18,7c-4.13171,1.71141 -8.21921,3.5329 -15,7c-5.19165,2.65456 -7.86325,5.1468 -10,7c-3.77728,3.27602 -6.74182,5.32718 -13,10c-2.88904,2.15718 -5.81265,4.2068 -8,6c-5.57666,4.57176 -9.03986,6.92398 -11,8c-5.11145,2.80591 -7.0979,3.82443 -9,5c-4.25327,2.62866 -6.95328,4.07193 -10,6c-4.92722,3.1181 -7.12704,3.67862 -10,5c-5.29749,2.43651 -6,4 -9,6c-3,2 -4.76108,3.41589 -8,5c-2.84073,1.38934 -6.07278,2.8819 -11,6c-3.04672,1.92807 -6.50424,2.03552 -11,5c-2.36128,1.55704 -5.0883,1.75238 -11,4c-7.11862,2.70651 -12.37422,2.94138 -25,8c-4.15134,1.66327 -8.17488,3.58786 -18,8c-4.07967,1.83203 -13.10701,4.08099 -17,5c-4.35251,1.0275 -9.87856,4.49347 -13,5c-0.98709,0.16019 -6.0034,1.91751 -7,2c-6.06204,0.50171 -7.87856,1.49347 -11,2c-2.96126,0.48056 -5,0 -9,0c-1,0 -3,0 -5,0c-2,0 -5.01291,0.16019 -6,0c-3.12144,-0.50653 -4.31001,-0.33749 -7,-2c-1.203,-0.7435 -1.82375,-1.48627 -4,-2c-0.97325,-0.22977 -2.82375,-1.48627 -5,-2c-0.97325,-0.22977 -2.07612,-0.61731 -3,-1c-1.30656,-0.5412 -2.07612,-1.61731 -3,-2c-1.30656,-0.5412 -1.61732,-1.07611 -2,-2c-0.5412,-1.30655 -2,-2 -3,-3c-1,-1 -1.29289,-1.29291 -2,-2c-0.70711,-0.70709 -1.4588,-0.69345 -2,-2c-0.38268,-0.92389 -0.61732,-1.07611 -1,-2c-0.5412,-1.30655 -1.61732,-2.07611 -2,-3c-0.5412,-1.30655 -1,-2 -2,-3l-1,-1l0,-1")
        self.loop.attr("stroke", 0)
    }
    
    self.flipAllCards = function (card, card2) {
         card.flipCard();
        card2.flipCard();
    }
    
    self.checkForMatch = function () {        
        var card = self.selectedCards.get(0);
        var card2 = self.selectedCards.get(1);
        if (card.shallowEquals(card2)) {        
            card.discard();
            card2.discard();
            self.matchesFound++;
            console.log("Matches:"+self.matchesFound);
            self.selectedCards = new Set();
        } else {
            setTimeout(self.flipAllCards(card,card2), 200);
        }
        
        if (self.matchesFound == self.numCards) {
            self.endGame();
        }
    }
    
    self.endGame = function() {
        
        var youwin = paper.print(150,400, "You Win!", paper.getFont("Droid Sans", "bold"), 48)
        youwin.toFront();
        youwin.attr("fill", "white")
        youwin.animateAlong(self.loop, 2000, false);
    }
    
    
    
    self.init();
}